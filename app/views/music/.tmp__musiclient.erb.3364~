<%#
# To change this template, choose Tools | Templates
# and open the template in the editor.
%>
<%# Author mafolz %>
<script type="text/javascript" charset="utf-8">
  window.onload=function(){
    MusicBlog.init();
    MusicBlog.showNowListening();
  }
  <%
  temparray = []
  @songs.each do |song|
    temparray << ( RAILS_URL + url_for(:controller => "song" , 
          :action => "listen",
          :id => (song.artist.name + " - " + song.title) )+".mp3" )
  end
   %>
  var defaultMusicTracks = <%= temparray.inspect %>
// Create the MusicBlog global object if it isn't already here
if (typeof MusicBlog == "undefined") {
  var MusicBlog={};
}

MusicBlog.init = function() {
  if (typeof(songbird) != "undefined") {

    // set an internal variable so we know we're in Songbird
    this.isSongbird = true;

    // set the permission scope at the full domain and
    // smallest path setting so ALL pages in my site can access the same
    // site library.
    songbird.setSiteScope("", "/");

    // get the sitelibrary
    this.siteLib = songbird.siteLibrary;

    // Add our specific properties to the Songbird player
    this.addProperties();

    // setup our listeners
    this.setupListeners();

    // create a media list and the set it into the webPlaylist
    this.loadPlaylist();

    // use a list for the user's favorites
    this.favsList = this.getOrCreateMediaList("__favs__");

    // Do this after the columns maybe?
    this.setPropertyValues();


    // Pick the columns we want shown - this must be called AFTER a mediaList
    // has been set in the webPlaylist, not before. The columns don't exist
    // before the mediaList is set and the UI is shown.
    this.setColumns();

    // commands provide extra functionality and provide callbacks to the page
    this.addCommands();

    // setting states for HTML buttons
    document.getElementById("show-main").disabled = "disabled";
    document.getElementById("show-download").removeAttribute("disabled");
    document.getElementById("show-favorites").removeAttribute("disabled");

  } else {
    this.isSongbird = false;
  }
}

MusicBlog.showNowListening = function() {
  if (this.isSongbird) {
    document.getElementById('now-listening').style.display = 'block';
  } else {
    document.getElementById('download-songbird').style.display = 'block';
  }
}

MusicBlog.getVersion = function() {
  var version = navigator.userAgent.match(/Songbird\/([\d\.]+)(\S+)/);
  if (version != null) {
    return version[1];
  } else {
    return null;
  }
}

MusicBlog.setupListeners = function() {
  var obs = {
    mb: MusicBlog,
    observe: function ( aSubject, aTopic, aData) {
      this.mb.setData(aTopic, aData);
    }
  }

  if (this.isSongbird) {
    // listen to songbird state changes
    songbird.addListener("metadata.artist", obs);
    songbird.addListener("metadata.album", obs);
    songbird.addListener("metadata.title", obs);

    // listen to clicks in the WebPlaylist
    document.addEventListener("PlaylistCellClick", MusicBlog.onPlaylistClick, false);

    // listeners for the events generated by the commands
    document.addEventListener("play-all", MusicBlog.handleEvent, true );
    document.addEventListener("add-to-favs", MusicBlog.handleEvent, true );
    document.addEventListener("download-sel", MusicBlog.handleEvent, true );
    document.addEventListener("buy-amazon", MusicBlog.handleEvent, true );
    document.addEventListener("show-download", MusicBlog.handleEvent, true );
    document.addEventListener("show-main", MusicBlog.handleEvent, true );
    document.addEventListener("show-favorites", MusicBlog.handleEvent, true );

  }
}

MusicBlog.onPlaylistClick = function(event) {
}

MusicBlog.handleEvent = function(event) {
  if (event.type == "play-all") {
    songbird.play();
  } else if (event.type == "add-to-favs") {
    var enumerator = songbird.webPlaylist.selection;
    var count = 0;
    var item;
    while (enumerator.hasMoreElements()) {
      // enumerates over indexed mediaItems, get the wrapped Item
      item = enumerator.getNext().mediaItem;
      MusicBlog.favsList.add(item);
    }

  } else if (event.type == "download-sel") {
    songbird.downloadSelected(songbird.webPlaylist);
  } else if (event.type == "buy-amazon") {
    var enumerator = songbird.webPlaylist.selection;
    var count = 0;
    var item;
    while (enumerator.hasMoreElements()) {
      // enumerates over indexed mediaItems, get the wrapped Item
      item = enumerator.getNext().mediaItem;
      count++;
    }

    if (count == 0) {
      alert("Please select a track to purchase from Amazon, then click the 'Buy from Amazon' button.");
      return;
    }
    if (count > 1) {
      alert("Please select only one track to purchase from Amazon, then click the 'Buy from Amazon' button.");
      return;
    }

    // open a page into amazon's affiliate program
    var url = item.getProperty("http://example.com/purchaseLink")
    window.open(url);
  } else if (event.type == "show-download") {
    songbird.webPlaylist.mediaList = songbird.downloadMediaList;
    // setting states for HTML buttons
    document.getElementById("show-main").removeAttribute("disabled");
    document.getElementById("show-download").disabled = "disabled";
    document.getElementById("show-favorites").removeAttribute("disabled");
  } else if (event.type == "show-main") {
    songbird.webPlaylist.mediaList = MusicBlog.mainList;
    // setting states for HTML buttons
    document.getElementById("show-main").disabled = "disabled";
    document.getElementById("show-download").removeAttribute("disabled");
    document.getElementById("show-favorites").removeAttribute("disabled");
  } else if (event.type == "show-favorites") {
    songbird.webPlaylist.mediaList = MusicBlog.favsList;
    // setting states for HTML buttons
    document.getElementById("show-main").removeAttribute("disabled");
    document.getElementById("show-download").removeAttribute("disabled");
    document.getElementById("show-favorites").disabled = "disabled";
  }
}

// These just look up a specific element in the document and then set
// the innerHTML to the new value passed in.
MusicBlog.onArtistChanged = function(value) {
  document.getElementById("curArtist").innerHTML = value;
}
MusicBlog.onAlbumChanged = function(value) {
  document.getElementById("curAlbum").innerHTML = value;
}
MusicBlog.onTitleChanged = function(value) {
  document.getElementById("curTitle").innerHTML = value;
}

// Called by the observer of the state changes this code figures out
// which metadata chagned and calls the appropriate function
MusicBlog.setData = function(metadata, value) {

  var emptyValue = 'unknown';

  if (value == '') {value = emptyValue;}
  if ( metadata == "metadata.artist" ) {
    this.onArtistChanged(value);
  } else if ( metadata == "metadata.album" ) {
    this.onAlbumChanged(value);
  } else if ( metadata == "metadata.title" ) {
    this.onTitleChanged(value);
  }

  if ((document.getElementById("curArtist").innerHTML == emptyValue) && (document.getElementById("curAlbum").innerHTML == emptyValue) && (document.getElementById("curTitle").innerHTML == emptyValue)) {
    document.getElementById("now-listening-metadata").style.display = "none";
    document.getElementById("now-listening-nothing").style.display = "block";
    // setting state for HTML button
    document.getElementById("add-to-favs").disabled = "disabled";
  }
  else {
    document.getElementById("now-listening-metadata").style.display = "block";
    document.getElementById("now-listening-nothing").style.display = "none";
    // setting states for HTML buttons
    document.getElementById("add-to-favs").removeAttribute("disabled");
  }
}

MusicBlog.loadPlaylist = function() {
  if (this.isSongbird) {
    // we are being shown in Songbird so populate the webPlaylist

    // Try to retrieve an existing playlist
    this.mainList = this.getOrCreateMediaList("__main__");
	this.mainList.clear();

    // Get the urls for all the tracks we want to display
    this.populateTracks();

    // Loop over our tracks, in turn creating an item and then adding it to our
    // simple mediaList.
    for each ( var track in this.pageTracks ) {

      // need to check the type because the prototype.js stuff appends an iterator
      // on the array type and that shows up in a for loop as an item
      if( typeof(track) == "string" ) {

        var item = this.siteLib.createMediaItem(track);
        //item.setProperty("http://example.com/ccImage", "http://ccmixter.org/ccimages/lics/small-by-nc-3.png");
        this.mainList.add(item);
      }
    }

    // Set our medialist to the data backing mediaList of the webPlaylist to
    // get it to show up in the UI
    songbird.webPlaylist.mediaList = this.mainList;

  } else {
    // We aren't being viewed in Songbird so at this point we could insert
    // links into a segment of the page or change the appearance in order
    // to have the tracks show up in-page
  }
}

MusicBlog.setPropertyValues = function() {
  var listener = {
    onEnumerationBegin: function() { return true; },
    onEnumeratedItem: function(list, item) {
      item.setProperty("http://example.com/ccImage", "http://ccmixter.org/ccimages/lics/small-by-nc-3.png");
      item.setProperty("http://example.com/purchaseLink", "http://amazon.com/");
      return true;
    },
    onEnumerationEnd: function() { return true; }
  }
  this.mainList.enumerateAllItems(listener, 1);
}

MusicBlog.populateTracks = function() {
  // Possibly hit the database and get the list of tracks that should be
  // linked from this page. We'll just fake it here by creating an array of
  // mp3 tracks pulled from the inter-web
  this.pageTracks = new Array();

  for (i in defaultMusicTracks) {
	  this.pageTracks.push(defaultMusicTracks[i]);
  }
}

MusicBlog.addProperties = function() {
  // create 2 new property types that we can set values for when we
  // create mediaItems. Be sure to use a specific unique name for the
  // first arg so it doesn't overlap with any other property. Some args are
  // optional, check the docs for the full usage.
  songbird.createImageProperty("http://example.com/ccImage", "CC", true);
  songbird.createTextProperty("http://example.com/userTags", "Tags");

  // create a hidden property on items to store the link to the amazon affiate program
  songbird.createTextProperty("http://example.com/purchaseLink", "Link", true, true);
}

MusicBlog.setColumns = function() {
  var wp = songbird.webPlaylist;

  // start with a clean slate so we know just what we have.
  wp.clearColumns();

  // Add just the columns we want with their optional sizes
  wp.appendColumn("http://songbirdnest.com/data/1.0#ordinal");
  wp.appendColumn("http://example.com/ccImage", "35");
  wp.appendColumn("http://songbirdnest.com/data/1.0#trackName", "150");
  wp.appendColumn("http://songbirdnest.com/data/1.0#artistName");
  wp.appendColumn("http://songbirdnest.com/data/1.0#albumName");
  wp.appendColumn("http://songbirdnest.com/data/1.0#duration");
  wp.appendColumn("http://example.com/userTags", "50");
}

MusicBlog.addCommands = function() {
  // Provide an easy way for our viewers to download, play, and give us
  // money through our amazon sponsorship program.
  songbird.commands.addCommand( "action",
                                "add-to-favs",
                                "Add to Favs",
                                "Add track to your favorites list." );
  songbird.commands.addCommand( "action",
                                "download-sel",
                                "Download Selected",
                                "Download selected tracks to your library." );
  songbird.commands.addCommand( "action",
                                "buy-amazon",
                                "Buy from Amazon",
                                "Buy this track from Amazon." );
  songbird.commands.addCommand( "action",
                                "play-all",
                                "Play all songs",
                                "Play all songs." );
  songbird.commands.addCommand( "separator",
                                "sep",
                                "sep",
                                "sep" );
  songbird.commands.addCommand( "action",
                                "show-main",
                                "Show Main List",
                                "Show this page's main list." );
  songbird.commands.addCommand( "action",
                                "show-download",
                                "Show Downloads",
                                "Show the download list." );
  songbird.commands.addCommand( "action",
                                "show-favorites",
                                "Show Favorites",
                                "Show your favorites list." );
}

MusicBlog.getOrCreateMediaList = function(name) {
  // This call will hand back an existing list is there is one
  var list = this.siteLib.createSimpleMediaList(name);
  return list;
}

function mbAddTextColumn( id, displayName, beforeCol, editable, width ) {
  // signature( type, id, displayName, label, beforeCol, hidden, viewable, editable, nullsort, width);
  songbird.webPlaylist.addColumn( "text", id, displayName, "", beforeCol, false, true, editable, 0, width);
}

function mbAddImageColumn( id, displayName, label, beforeCol, editable, width ) {
  // signature( type, id, displayName, label, beforeCol, hidden, viewable, editable, nullsort, width);
  songbird.webPlaylist.addColumn( "image", id, displayName, label, beforeCol, false, true, editable, 0, width);
}

</script>

        "/Genres/" + song.artist.genre.id.to_s +
      "/Artists/" + song.artist.id.to_s +
      "/Songs/" + song.id.to_s + "." + song.format